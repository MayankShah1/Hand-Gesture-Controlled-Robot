
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009c  00000000  00000000  0000018d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000006a  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000152  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000009a  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	MCUCSR |= (1<<JTD);
	MCUCSR |= (1<<JTD);
	*/
	int x,y,z;
	
	DDRA = 0X00; /*to use input pins*/
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0XFF; /*to use all pins for LED*/
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	
	PORTA = 0XFF;
  72:	8b bb       	out	0x1b, r24	; 27
	ADCSRA = 0X87;
  74:	87 e8       	ldi	r24, 0x87	; 135
  76:	86 b9       	out	0x06, r24	; 6
	
	while(1)
	{
		ADMUX = 0XE0;
  78:	a0 ee       	ldi	r26, 0xE0	; 224
		ADCSRA |= (1 << ADSC);
		while(!(ADCSRA & (1 << ADIF)));
		x = ADCH;
	
		ADMUX = 0XE1;
  7a:	f1 ee       	ldi	r31, 0xE1	; 225
		ADCSRA |= (1 << ADSC);
		while(!(ADCSRA & (1 << ADIF)));
		y = ADCH;
	
		ADMUX = 0XE2;
  7c:	e2 ee       	ldi	r30, 0xE2	; 226
		{
			PORTC = 4;
		}
		else if(y < 132 && x > 132 && x < 142) // Backward direction
		{
			PORTC = 8;
  7e:	78 e0       	ldi	r23, 0x08	; 8
		{
			PORTC = 2;
		}
		else if(y > 145 && x > 132 && x < 142) // Forward direction
		{
			PORTC = 4;
  80:	64 e0       	ldi	r22, 0x04	; 4
		{
			PORTC = 1;
		}
		else if(x < 132 && y > 132 && y < 142) // Left Direction
		{
			PORTC = 2;
  82:	52 e0       	ldi	r21, 0x02	; 2
		z= ADCH;
	
		
		if(x > 142)	// Right direction
		{
			PORTC = 1;
  84:	41 e0       	ldi	r20, 0x01	; 1
	PORTA = 0XFF;
	ADCSRA = 0X87;
	
	while(1)
	{
		ADMUX = 0XE0;
  86:	a7 b9       	out	0x07, r26	; 7
		ADCSRA |= (1 << ADSC);
  88:	36 9a       	sbi	0x06, 6	; 6
		while(!(ADCSRA & (1 << ADIF)));
  8a:	34 9b       	sbis	0x06, 4	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <main+0x1e>
		x = ADCH;
  8e:	85 b1       	in	r24, 0x05	; 5
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
	
		ADMUX = 0XE1;
  94:	f7 b9       	out	0x07, r31	; 7
		ADCSRA |= (1 << ADSC);
  96:	36 9a       	sbi	0x06, 6	; 6
		while(!(ADCSRA & (1 << ADIF)));
  98:	34 9b       	sbis	0x06, 4	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <main+0x2c>
		y = ADCH;
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	90 e0       	ldi	r25, 0x00	; 0
	
		ADMUX = 0XE2;
  a0:	e7 b9       	out	0x07, r30	; 7
		ADCSRA |= (1 << ADSC);
  a2:	36 9a       	sbi	0x06, 6	; 6
		while(!(ADCSRA & (1 << ADIF)));
  a4:	34 9b       	sbis	0x06, 4	; 6
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x38>
		z= ADCH;
  a8:	b5 b1       	in	r27, 0x05	; 5
	
		
		if(x > 142)	// Right direction
  aa:	2f 38       	cpi	r18, 0x8F	; 143
  ac:	31 05       	cpc	r19, r1
  ae:	14 f0       	brlt	.+4      	; 0xb4 <main+0x48>
		{
			PORTC = 1;
  b0:	45 bb       	out	0x15, r20	; 21
  b2:	e9 cf       	rjmp	.-46     	; 0x86 <main+0x1a>
		}
		else if(x < 132 && y > 132 && y < 142) // Left Direction
  b4:	24 38       	cpi	r18, 0x84	; 132
  b6:	31 05       	cpc	r19, r1
  b8:	44 f4       	brge	.+16     	; 0xca <main+0x5e>
  ba:	85 38       	cpi	r24, 0x85	; 133
  bc:	91 05       	cpc	r25, r1
  be:	2c f0       	brlt	.+10     	; 0xca <main+0x5e>
  c0:	8e 38       	cpi	r24, 0x8E	; 142
  c2:	91 05       	cpc	r25, r1
  c4:	14 f4       	brge	.+4      	; 0xca <main+0x5e>
		{
			PORTC = 2;
  c6:	55 bb       	out	0x15, r21	; 21
  c8:	de cf       	rjmp	.-68     	; 0x86 <main+0x1a>
		}
		else if(y > 145 && x > 132 && x < 142) // Forward direction
  ca:	82 39       	cpi	r24, 0x92	; 146
  cc:	91 05       	cpc	r25, r1
  ce:	44 f0       	brlt	.+16     	; 0xe0 <main+0x74>
  d0:	25 38       	cpi	r18, 0x85	; 133
  d2:	31 05       	cpc	r19, r1
  d4:	2c f0       	brlt	.+10     	; 0xe0 <main+0x74>
  d6:	2e 38       	cpi	r18, 0x8E	; 142
  d8:	31 05       	cpc	r19, r1
  da:	11 f0       	breq	.+4      	; 0xe0 <main+0x74>
		{
			PORTC = 4;
  dc:	65 bb       	out	0x15, r22	; 21
  de:	d3 cf       	rjmp	.-90     	; 0x86 <main+0x1a>
		}
		else if(y < 132 && x > 132 && x < 142) // Backward direction
  e0:	84 38       	cpi	r24, 0x84	; 132
  e2:	91 05       	cpc	r25, r1
  e4:	44 f4       	brge	.+16     	; 0xf6 <main+0x8a>
  e6:	25 38       	cpi	r18, 0x85	; 133
  e8:	31 05       	cpc	r19, r1
  ea:	2c f0       	brlt	.+10     	; 0xf6 <main+0x8a>
  ec:	2e 38       	cpi	r18, 0x8E	; 142
  ee:	31 05       	cpc	r19, r1
  f0:	11 f0       	breq	.+4      	; 0xf6 <main+0x8a>
		{
			PORTC = 8;
  f2:	75 bb       	out	0x15, r23	; 21
  f4:	c8 cf       	rjmp	.-112    	; 0x86 <main+0x1a>
		{
			PORTC = 0;
		}
		else // Stop direction
		{
			PORTC = 0;
  f6:	15 ba       	out	0x15, r1	; 21
  f8:	c6 cf       	rjmp	.-116    	; 0x86 <main+0x1a>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
