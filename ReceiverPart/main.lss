
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000089  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002d0  00000000  00000000  00000235  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000133  00000000  00000000  00000505  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000308  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000121  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001e0  00000000  00000000  00000af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00000cd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <stop>:
*/

/*stop the car*/
void stop()
{
	PORTB = 0B00000000;
  6c:	18 ba       	out	0x18, r1	; 24
}
  6e:	08 95       	ret

00000070 <forward>:

/*move car forward*/
void forward()
{
	PORTB = 0B00001010;
  70:	8a e0       	ldi	r24, 0x0A	; 10
  72:	88 bb       	out	0x18, r24	; 24
}
  74:	08 95       	ret

00000076 <backward>:

/*move car backward*/
void backward()
{
	PORTB = 0B00000101;
  76:	85 e0       	ldi	r24, 0x05	; 5
  78:	88 bb       	out	0x18, r24	; 24
}
  7a:	08 95       	ret

0000007c <axial_left>:

/*take an axial-left turn*/
void axial_left()
{
	PORTB = 0B00000110;
  7c:	86 e0       	ldi	r24, 0x06	; 6
  7e:	88 bb       	out	0x18, r24	; 24
}
  80:	08 95       	ret

00000082 <axial_right>:

/*take an axial-right turn*/
void axial_right()
{
	PORTB = 0B00001001;
  82:	89 e0       	ldi	r24, 0x09	; 9
  84:	88 bb       	out	0x18, r24	; 24
}
  86:	08 95       	ret

00000088 <differential_left>:

/*take a differential-left turn*/
void differential_left()
{
	PORTB = 0B00000010;
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	88 bb       	out	0x18, r24	; 24
}
  8c:	08 95       	ret

0000008e <differential_right>:

/*take a differential-right turn*/
void differential_right()
{
	PORTB = 0B00001000;
  8e:	88 e0       	ldi	r24, 0x08	; 8
  90:	88 bb       	out	0x18, r24	; 24
}
  92:	08 95       	ret

00000094 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(){

	MCUCSR |= (1<<JTD);
  94:	84 b7       	in	r24, 0x34	; 52
  96:	80 68       	ori	r24, 0x80	; 128
  98:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1<<JTD);
  9a:	84 b7       	in	r24, 0x34	; 52
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	84 bf       	out	0x34, r24	; 52
	
	DDRB = 0X0F; /*for motor connection*/
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	87 bb       	out	0x17, r24	; 23
	
	DDRC &= ~15; /*As the receiver is connected at 4 pins of PORTC*/
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	84 bb       	out	0x14, r24	; 20
	
	PORTC |= 15; /*So the resistors are pulled up to sense input*/
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	85 bb       	out	0x15, r24	; 21
			forward();
			_delay_ms(100);
		}
		else if(PINC & 8)
		{
			PORTB = 8;
  b0:	58 e0       	ldi	r21, 0x08	; 8
}

/*move car backward*/
void backward()
{
	PORTB = 0B00000101;
  b2:	b5 e0       	ldi	r27, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	28 ec       	ldi	r18, 0xC8	; 200
  b6:	30 e0       	ldi	r19, 0x00	; 0
			differential_left();
			_delay_ms(100);
		}
		else if(PINC & 4)
		{
			PORTB = 4;
  b8:	a4 e0       	ldi	r26, 0x04	; 4
}

/*move car forward*/
void forward()
{
	PORTB = 0B00001010;
  ba:	7a e0       	ldi	r23, 0x0A	; 10
			differential_right();
			_delay_ms(100);
		}
		else if(PINC & 2)
		{
			PORTB = 2;
  bc:	42 e0       	ldi	r20, 0x02	; 2
		{
			stop();
		}
		else if(PINC & 1)
		{	
			PORTB = 1;
  be:	61 e0       	ldi	r22, 0x01	; 1
	
	PORTC |= 15; /*So the resistors are pulled up to sense input*/
	
	while(1)
	{
		if(((PINC & 1) == 0) && ((PINC & 2) == 0) && ((PINC & 4) == 0) && ((PINC & 8) == 0))
  c0:	98 99       	sbic	0x13, 0	; 19
  c2:	08 c0       	rjmp	.+16     	; 0xd4 <main+0x40>
  c4:	99 99       	sbic	0x13, 1	; 19
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <main+0x40>
  c8:	9a 99       	sbic	0x13, 2	; 19
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <main+0x40>
  cc:	9b 99       	sbic	0x13, 3	; 19
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x40>
*/

/*stop the car*/
void stop()
{
	PORTB = 0B00000000;
  d0:	18 ba       	out	0x18, r1	; 24
  d2:	f6 cf       	rjmp	.-20     	; 0xc0 <main+0x2c>
		{
			stop();
		}
		else if(PINC & 1)
  d4:	98 9b       	sbis	0x13, 0	; 19
  d6:	0a c0       	rjmp	.+20     	; 0xec <main+0x58>
		{	
			PORTB = 1;
  d8:	68 bb       	out	0x18, r22	; 24
}

/*take a differential-right turn*/
void differential_right()
{
	PORTB = 0B00001000;
  da:	58 bb       	out	0x18, r21	; 24
  dc:	88 ee       	ldi	r24, 0xE8	; 232
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	f9 01       	movw	r30, r18
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x4e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e8:	d9 f7       	brne	.-10     	; 0xe0 <main+0x4c>
  ea:	ea cf       	rjmp	.-44     	; 0xc0 <main+0x2c>
			differential_right();
			_delay_ms(100);
		}
		else if(PINC & 2)
  ec:	99 9b       	sbis	0x13, 1	; 19
  ee:	0a c0       	rjmp	.+20     	; 0x104 <main+0x70>
		{
			PORTB = 2;
  f0:	48 bb       	out	0x18, r20	; 24
}

/*take a differential-left turn*/
void differential_left()
{
	PORTB = 0B00000010;
  f2:	48 bb       	out	0x18, r20	; 24
  f4:	88 ee       	ldi	r24, 0xE8	; 232
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	f9 01       	movw	r30, r18
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <main+0x64>
 102:	de cf       	rjmp	.-68     	; 0xc0 <main+0x2c>
			differential_left();
			_delay_ms(100);
		}
		else if(PINC & 4)
 104:	9a 9b       	sbis	0x13, 2	; 19
 106:	0a c0       	rjmp	.+20     	; 0x11c <main+0x88>
		{
			PORTB = 4;
 108:	a8 bb       	out	0x18, r26	; 24
}

/*move car forward*/
void forward()
{
	PORTB = 0B00001010;
 10a:	78 bb       	out	0x18, r23	; 24
 10c:	88 ee       	ldi	r24, 0xE8	; 232
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	f9 01       	movw	r30, r18
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 116:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	d9 f7       	brne	.-10     	; 0x110 <main+0x7c>
 11a:	d2 cf       	rjmp	.-92     	; 0xc0 <main+0x2c>
			forward();
			_delay_ms(100);
		}
		else if(PINC & 8)
 11c:	9b 9b       	sbis	0x13, 3	; 19
 11e:	d0 cf       	rjmp	.-96     	; 0xc0 <main+0x2c>
		{
			PORTB = 8;
 120:	58 bb       	out	0x18, r21	; 24
}

/*move car backward*/
void backward()
{
	PORTB = 0B00000101;
 122:	b8 bb       	out	0x18, r27	; 24
 124:	88 ee       	ldi	r24, 0xE8	; 232
 126:	93 e0       	ldi	r25, 0x03	; 3
 128:	f9 01       	movw	r30, r18
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 130:	d9 f7       	brne	.-10     	; 0x128 <main+0x94>
 132:	c6 cf       	rjmp	.-116    	; 0xc0 <main+0x2c>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
